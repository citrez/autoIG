// Project autoIG {
//   database_type: 'PostgreSQL'
//   Note: 'An automated trading project for use with IG trading'
// }
//// -- LEVEL 1
//// -- Tables and References

// Creating tables
Table IG.create_open_position_confirms {
  dealId varchar [pk,
  note: '''Each buying of a stock has a dealID. It is the permanent deal reference for a confirmed trade''']
  dealReference varchar [note: '''Transient deal reference for an unconfirmed trade''']
  epic varchar 
  date datetime
  dealstatus IG.dealstatus // Defined Enums
  reason varchar
  status IG.status
  direction IG.direction
  expiry varchar [note: '''DFB: Daily funded bet. Position remains open until you close it.''']
  size float
  stopDistance float 
  limitDistance float
  Note: '''
  Responce from opening a position.
  Returns a deal confirmation information for the given deal reference
  '''
}

Table IG.close_open_position_confirms {
  dealId varchar [pk]
  affecteddeals json 
  date datetime
  dealstatus IG.dealstatus
  
  
}
  


Table public.open_position_responce_info {
  dealId varchar [pk]
  sell_date datetime [note: 'The datetime I want to sell']
  model_used varchar
  prediction float
}


Table Position_Metrics {
  dealId varchar [pk]
  note: '''Once a position has been opened and closed, we can calculate many things about it, to see how well it did.'''
}

Table IG.open_positions {
  dealId varchar [pk]
  contractSize float8
  createdDate datetime
  createdDateUTC datetime
  dealRefernce varchar
  size float8
  direction varchar
  name varchar
  continent_name varchar
  note: '''
  The currently open poistions.
  This is actually not a particularly useful table.
  We can work out returns etc without knowing currently open positions.
  This can be calculated by looking at the dealID in create_open_position_responce that are not in close_position_responce
  '''
 }

Table IG.instrument {
  epic varchar [pk]
  expiry varchar
  name varchar
  type varchar
  streamingPricesAvailable bool
  marketId varchar
  openingHours date
  NOTE: 'This is information about the instrument itself'
}

Table raw_stream {
  epic varchar [pk]
  updated_at datetime
  bid_open float
  ask_open float
  market_state varchar
  // note: 'A raw stream of subscription data'
}

Table stream {
  epic varchar [pk]
  updated_at datetime
  bid_open float
  ask_open float
  market_state varchar
  NOTE: 'A resampled (1 min) version of raw_stream'
}

IG.transaction_history {
  
}

ref: IG.instrument.epic < raw_stream.epic
ref: public.open_position_responce_info.dealId - IG.create_open_position_confirms.dealId
ref: IG.create_open_position_confirms.epic  > IG.instrument.epic

Enum IG.dealstatus {
  ACCEPTED
  DECLINED
}

Enum IG.status {
  AMENDED
  DELETED
  FULLY_CLOSED
  OPENED
  PARTIALLY_CLOSED
  
}

Enum IG.direction {
  BUY 
  SELL
}