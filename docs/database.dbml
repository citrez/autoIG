Project autoIG {
  database_type: 'PostgreSQL'
  Note: '''
  An automated trading project for use with IG trading
  Validate - `dbdocs validate docs/database.dbml`
  Build UI - `dbdocs build docs/database.dbml`
  `dbml2sql docs/database.dbml > docs/database.sql`

  `sqlite3 autoIG/tmp/autoIG.sqlite < docs/database.sql`
  Open here for a UI: https://dbdocs.io/citrez/autoIG

  SCHEMA DESCRIPTIONS:
  tmp: 
  Where temporary tables are kept.
  These are needed for trading but do not need to be persiseted once the data has been processed.
  pub: 
  Tables I make and use
  stream: 
  IG streams
  IG:
  IG rest API

  The first two are my creation. The second two are IG's
  '''
}

////////////////
// TMP SCHEMA //
////////////////

table tmp.raw_stream {
  // derived from stream.prices // this raw data stream doesnt need to be saved
  epic varchar 
  updated_at datetime 
  bid_open float
  ask_open float
  market_state varchar
  note: 'A selection from stream.price'

  indexes {
    (epic,updated_at) [pk]
  }
  
}

table tmp.to_sell {
  dealId varchar // opening dealId
  to_sell_date datetime [note: 'The datetime I want to sell']
  sold boolean
  note: '''
  For each opening dealId when should it be sold.
  '''
}

///////////////////
// PUB SCHEMA //
///////////////////

table pub.stream {
  epic varchar
  updated_at datetime 
  bid_open float
  ask_open float
  market_state varchar
  NOTE: 'A resampled (1 min) version of raw_stream'
  indexes {
    (epic,updated_at) [pk]
  }
}

table pub.position_metrics {
  dealId varchar [pk]
  model_used varchar [note: 'The name+version is taken from the model registery']
  prediction float
  buy_date datetime
  buy_level_resp float
  note: '''
  We want to keep track of many things about the position we open, when we open them. 
  '''
}

table pub.transactions_joined {
  y_true float 
  buy_date datetime
  closing_dealId varchar
  closeLevel float
  currency varchar
  instrumentName varchar
  model_used varchar
  opening_dealId varchar
  openLevel float
  y_pred float
  profitAndLoss varchar
  profitAndLoss_numeric float
  sell_date date
  size float
  note:"IG.transaction, joined with other useful things to get some metrics."
}

table sold {
  dealId varchar
  close_level_resp float
  profit_resp float
  note: 'Simply the responce from closing an open postion'
}


///////////////////
// STREAM SCHEMA //
///////////////////

table stream.price {
  // MERGE
  bid float [note: 'I sell for']
  change float
  change_pct float
  epic varchar
  high float
  low float
  market_delay boolean
  market_state IG.market_state
  mid_open float
  offer float [note: 'I buy for']
  update_time datetime
  NOTE: '''This is a stream of prices for a particular instrument'''
}

table stream.trade {
  // DISTINCT
  affecteddeals json
  direction IG.direction
  dealReference varchar
  dealstatus IG.dealstatus
  dealId varchar
  epic varchar
  level float [note:'instrument price']
  size float
  status IG.status
  NOTE: '''
  These are the distinct confirms
  i.e everytime we get a confirm, this returns an item
  It does not necessariliy need to be open a successfull position.
  A rejection will show here, but not in OPU table
  '''
}

table stream.OPU {
  // Open position updates
  // DISTINCT
  // dealIdOrigin	What is this?
  channel IG.channel
  currency varchar
  date datetime
  dealId varchar
  dealstatus IG.dealstatus
  dealReference varchar
  direction IG.direction
  epic varchar
  level float
  status IG.status // This can only take OPENED, UPDATED, DELETED
  size float
  NOTE: '''Open position updates (OPU) for an account. This is the stream for activity?'''
}

///////////////
// IG SCHEMA //
///////////////

table IG.transactions {
  closelevel float [note: 'Price deal closed at']
  currency varchar
  date date [note: 'This is not a datetime, better to join to activity to get datetime of closing/opening position']
  dateutc date
  openlevel float [note: 'Price deal opened at']
  opendateutc date
  period varchar [note: 'e.g daily funded bet (DFB)']
  profitandloss float [note: '(closelevel-openlevel)*size']
  reference varchar [pk, note: 'The dealId of the closing deal']
  size float
  transationtype varchar
  note:'''
  Transactions are a possition that has been both opened and closed.
  So we can calculate profit
  '''
}

table IG.activity {
  channel varchar
  date datetime
  dealId varchar [pk]
  description varchar
  details json [note:'''
  Think this is a JSON of stream.OPU of the affected positions.
  An action opens or closed a position?
  These are all the dealIds affetion by the actions of an activity
  actiontype e.g POSITION_CLOSED, POSITION_DELETED, POSITION_OPENED,
  POSITION_PARTIALLY_CLOSED, POSITION_ROLLED
  ''']
  dealreference varchar
  direction IG.direction
  epic varchar
  NOTE: '''
  Activities are made up from actions.
  Activities can be on position or limit orders.
  Actions can be ammending, creating, deleting a position
  '''
}

table IG.open_positions {
  contractSize float
  continent_name varchar
  createdDate datetime
  createdDateUTC datetime
  dealId varchar [pk]
  dealRefernce varchar
  direction varchar
  size float
  name varchar
  note: '''
  The currently open poistions.
  This can be calculated by looking at the dealID in create_open_position_responce 
  that are not in close_position_responce
  '''
 }

table IG.instrument {
  epic varchar [pk]
  expiry varchar
  name varchar
  type varchar
  streamingPricesAvailable boolean
  marketId varchar
  openingHours date
  NOTE: 'This is information about the instrument itself'
}



// table responce.create_open_position_confirms {
//   dealId varchar [pk, note: '''Each buying of a instrument has a dealID. It is the permanent deal reference for a confirmed trade''']
//   dealReference varchar [note: '''Transient deal reference for an unconfirmed trade''']
//   dealstatus IG.dealstatus // Defined Enums
//   direction IG.direction 
//   date datetime
//   epic varchar 
//   expiry varchar [note: '''e.g DFB: Daily funded bet. Position remains open until you close it.''']
//   reason varchar
//   status IG.status
//   size float
//   stopDistance float 
//   limitDistance float
//   Note: '''
//   Responce from opening a position.
//   Returns a deal confirmation information for the given deal reference
//   '''
// }

// Table pub.close_open_position_confirms {
//   dealId varchar [pk]
//   affecteddeals json 
//   date datetime
//   dealstatus IG.dealstatus
// status
// reason
// epic
// expiry
// dealReference
// level
// size
// direction
// stopLevel
// limitLevel
// stopDistance
// limitDistance
// guaranteedStop
// trailingStop
// profit
// profitCurrency

ref: IG.instrument.epic < tmp.raw_stream.epic
ref: pub.position_metrics.dealId - tmp.to_sell.dealId


// Enums //
Enum IG.dealstatus {
  ACCEPTED
  DECLINED
}

Enum action_status {
  ACCEPTED
  REJECTED
  UNKNOWN
}

Enum IG.status {
// action status
  AMENDED
  DELETED
  FULLY_CLOSED
  UPDATED
  OPENED
  PARTIALLY_CLOSED
  
}

Enum IG.direction {
  BUY 
  SELL
}

Enum IG.channel {
  DEALER
  MOBILE
  pub_FIX_API
  pub_WEB_API
  SYSTEM
  WEB
}

Enum IG.market_state {
  CLOSED
  OFFLINE
  TRADEABLE
  EDIT
  AUCTION
  AUCTION_NO_EDIT
  SUSPENDED
}

Enum IG.activity_type {
  //activity type
  EDIT_STOP_AND_LIMIT
  POSITION
  SYSTEM
  WORKING_ORDER
}

