Project autoIG {
  database_type: 'PostgreSQL'
  Note: '''
  An automated trading project for use with IG trading
  Open here for a UI: https://dbdocs.io/citrez/autoIG
  '''
}

// STREAM SCHEMA //
table stream.price {
  // MERGE
  epic varchar
  mid_open float
  high float
  low float
  change float
  change_pct float
  update_time datetime
  market_delay boolean
  market_state IG.market_state
  bid float [note: 'I sell for']
  offer float [note: 'I buy for']
  NOTE: '''This is a stream of prices for a particular instrument'''
}

table stream.trade {
  // DISTINCT
  affecteddeals json
  direction IG.direction
  dealReference varchar
  dealstatus IG.dealstatus
  dealId varchar
  epic varchar
  level float [note:'instrument price']
  size float
  status IG.status
  NOTE: '''
  These are the distinct confirms
  i.e everytime we get a confirm, this returns an item
  It does not necessariliy need to be open a successfull position.
  A rejection will show here, but not in OPU table
  '''
}

// dealIdOrigin	What is this?
table stream.OPU {
  // DISTINCT
  channel IG.channel
  currency varchar
  date datetime
  dealId varchar
  dealstatus IG.dealstatus
  dealReference varchar
  direction IG.direction
  epic varchar
  level float
  status IG.status // This can only take OPENED, UPDATED, DELETED
  size float
  NOTE: '''Open position updates (OPU) for an account'''
}

// IG SCHEMA //
table IG.transactions {
  closelevel float
  currency varchar
  date datetime
  dateutc datetime
  openlevel float
  opendateutc datetime
  period varchar
  profitandloss float
  reference varchar [pk] //closing reference // this can be joined to dealId?
  size float
  transationtype varchar
  note:'''
  Transactions are a possition that has been both opened and closed.
  So we can calculate profit.
  '''
}

table IG.activity {
  channel varchar
  date datetime
  dealId varchar [pk]
  description varchar
  details json [note:'''
  Think this is a JSON of stream.OPU of the affected positions. An action opens or closed a position?
  These are all the dealIds affetion by the actions of an activity
  actiontype e.g POSITION_CLOSED, POSITION_DELETED, POSITION_OPENED, POSITION_PARTIALLY_CLOSED, POSITION_ROLLED
  ''']
  dealreference varchar
  direction IG.direction
  epic varchar
  NOTE: '''
  Activities are made up from actions.
  Activities can be on position or limit orders.
  Actions can be ammending, creating, deleting a position
  '''
}

table IG.open_positions {
  contractSize float
  continent_name varchar
  createdDate datetime
  createdDateUTC datetime
  dealId varchar [pk]
  dealRefernce varchar
  direction varchar
  size float
  name varchar
  note: '''
  The currently open poistions.
  This can be calculated by looking at the dealID in create_open_position_responce that are not in close_position_responce
  '''
 }

table IG.instrument {
  epic varchar [pk]
  expiry varchar
  name varchar
  type varchar
  streamingPricesAvailable bool
  marketId varchar
  openingHours date
  NOTE: 'This is information about the instrument itself'
}

// PUBLIC SCHEMA //
table public.raw_stream {
  // derived from stream.prices
  epic varchar [pk]
  updated_at datetime
  bid_open float
  ask_open float
  market_state varchar
  // note: 'A raw stream of subscription data'
}

table public.stream {
  epic varchar [pk]
  updated_at datetime
  bid_open float
  ask_open float
  market_state varchar
  NOTE: 'A resampled (1 min) version of raw_stream'
}
// table activitiy

// table IG.confirms {
//   dealId varchar
// }

table public.to_sell {
  dealId varchar
  to_sell_date datetime [note: 'The datetime I want to sell']
  sold varchar
}

table public.position_metrics {
  dealId varchar [pk]
  model_used varchar
  prediction float
  note: '''Once a position has been opened and closed, we can calculate many things about it, to see how well it did.'''
}

// table public.create_open_position_confirms {
//   dealId varchar [pk, note: '''Each buying of a instrument has a dealID. It is the permanent deal reference for a confirmed trade''']
//   dealReference varchar [note: '''Transient deal reference for an unconfirmed trade''']
//   dealstatus IG.dealstatus // Defined Enums
//   direction IG.direction 
//   date datetime
//   epic varchar 
//   expiry varchar [note: '''e.g DFB: Daily funded bet. Position remains open until you close it.''']
//   reason varchar
//   status IG.status
//   size float
//   stopDistance float 
//   limitDistance float
//   Note: '''
//   Responce from opening a position.
//   Returns a deal confirmation information for the given deal reference
//   '''
// }

// Table public.close_open_position_confirms {
//   dealId varchar [pk]
//   affecteddeals json 
//   date datetime
//   dealstatus IG.dealstatus
// }

ref: IG.instrument.epic < raw_stream.epic
ref: public.stream.epic - public.raw_stream.epic
ref: public.position_metrics.dealId - public.to_sell.dealId
// ref: public.open_position_responce_info.dealId - IG.create_open_position_confirms.dealId
// ref: IG.create_open_position_confirms.epic  > IG.instrument.epic


// Enums //
Enum IG.dealstatus {
  ACCEPTED
  DECLINED
}

Enum action_status {
  ACCEPTED
  REJECTED
  UNKNOWN
}

Enum IG.status {
// action status
  AMENDED
  DELETED
  FULLY_CLOSED
  UPDATED
  OPENED
  PARTIALLY_CLOSED
  
}

Enum IG.direction {
  BUY 
  SELL
}

Enum IG.channel {
  DEALER
  MOBILE
  PUBLIC_FIX_API
  PUBLIC_WEB_API
  SYSTEM
  WEB
}

Enum IG.market_state {
  CLOSED
  OFFLINE
  TRADEABLE
  EDIT
  AUCTION
  AUCTION_NO_EDIT
  SUSPENDED
}

Enum IG.activity_type {
  //activity type
  EDIT_STOP_AND_LIMIT
  POSITION
  SYSTEM
  WORKING_ORDER
}

// TABLE GROUPINGS //
// tablegroup stream {
//   stream.trade
// }